// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go-ws-server/src/config"
	"io"
	"os"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = ""

// func InitDocs(docs string) {
//     doc = docs
// }

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "2.0",
	Host:        config.Config.SERVER + config.Config.PORT + "/",
	Title:       "Gin Swagger Example API",
	Description: "This is a sample server server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
    filePath := "./src/docs/docs.json"

    file, err := os.Open(filePath)
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    defer file.Close() // Pastikan untuk selalu menutup file setelah digunakan

    // Membaca isi file
    content, err := io.ReadAll(file)
    if err != nil {
        fmt.Println("##########################################################\nError:", err)
        return
    }

    // Mengkonversi isi file menjadi string
    fileContent := string(content)
    doc = fileContent

	swag.Register(swag.Name, &s{})
}